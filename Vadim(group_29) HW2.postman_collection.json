{
	"info": {
		"_postman_id": "2aaaa47d-5f6a-4918-8916-e92b93ea358e",
		"name": "Vadim(group_29) HW",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "HW_1_Postman_Obruch",
			"item": [
				{
					"name": "EP_1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/get_method?name={{name}}&age={{age}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"get_method"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_3",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_1?name={{name}}&age={{age}}&weight={{weight}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_1"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								},
								{
									"key": "weight",
									"value": "{{weight}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_4",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_2?name={{name}}&age={{age}}&salary={{salary}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_2"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								},
								{
									"key": "salary",
									"value": "{{salary}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_5",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								},
								{
									"key": "salary",
									"value": "{{salary}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_6",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								},
								{
									"key": "salary",
									"value": "{{salary}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_7",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_2",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW_2_Postman_Obruch",
			"item": [
				{
					"name": "first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"В body приходит правильный string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/first",
							"host": [
								"{{url}}"
							],
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json(); \r",
									"\r",
									"\r",
									"\r",
									"let resp = JSON.parse(responseBody); // 3. Спарсить response body в json.\r",
									"let req = request.data\r",
									"let resp_name = resp.name\r",
									"let req_name = req.name\r",
									"let resp_age = resp.age\r",
									"let req_age = req.age\r",
									"let resp_salary = resp.salary\r",
									"let req_salary = req.salary\r",
									"\r",
									"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
									"pm.test(\"Name verification\", function () {\r",
									"    pm.expect(resp_name).to.eql(\"Alex\");\r",
									"});\r",
									"\r",
									"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
									"pm.test(\"Age check to.equal\", function () {\r",
									"    pm.expect(resp_age).to.equal(\"32\");\r",
									"});\r",
									"\r",
									"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
									"pm.test(\"Salary check to.equal\", function () {\r",
									"    pm.expect(resp_salary).to.equal(2000);\r",
									"});\r",
									"\r",
									"// 7. Спарсить request.\r",
									"\r",
									"\r",
									"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"name в ответе равно name s request \", function () {   \r",
									"    pm.expect(resp_name).to.eql(req_name);\r",
									"});\r",
									"\r",
									"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"age в ответе равно age s request \", function () {   \r",
									"    pm.expect(resp_age).to.eql(req_age);\r",
									"});\r",
									"\r",
									"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"salary в ответе равно salary s request \", function () {   \r",
									"    pm.expect(resp_salary).to.eql(Number(req_salary));\r",
									"});\r",
									"\r",
									"// 11. Вывести в консоль параметр family из response.\r",
									"console.log(jsonData.family)\r",
									"\r",
									"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
									"pm.test(\"u_salary_1_5_year в ответе равно salary*4\", function () {\r",
									"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req_salary*4);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "32",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "2000",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Alex",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"let resp = JSON.parse(responseBody);// 3.Спарсить response body в json.\r",
									"let req = pm.request.url.query.toObject()// 4. Спарсить request.\r",
									"\r",
									"let resp_name = resp.name\r",
									"let req_name = req.name\r",
									"let resp_age = resp.age\r",
									"let req_age = req.age\r",
									"let resp_salary = resp.salary\r",
									"let req_salary = req.salary\r",
									"\r",
									"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"name в ответе равно name s request \", function () {   \r",
									"    pm.expect(resp_name).to.eql(req_name);\r",
									"});\r",
									"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"age в ответе равно age s request \", function () {   \r",
									"    pm.expect(resp_age).to.eql(req_age);\r",
									"});\r",
									"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"salary в ответе равно salary s request \", function () {   \r",
									"    pm.expect(resp_salary) === (req_salary);\r",
									"});\r",
									"\r",
									"// 8. Вывести в консоль параметр family из response.\r",
									"console.log(jsonData.family)\r",
									"\r",
									"// 9. Проверить, что у параметра dog есть параметры name.\r",
									"pm.test(\"Dog to.have.property name\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog).to.have.property('name');\r",
									"});\r",
									"// 10. Проверить, что у параметра dog есть параметры age.\r",
									"pm.test(\"Dog to.have.property age\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog).to.have.property('age');\r",
									"});\r",
									"\r",
									"// 11. Проверить, что параметр name имеет значение Luky.\r",
									"\r",
									"pm.test(\"name = Luky\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
									"});\r",
									"\r",
									"//12. Проверить, что параметр age имеет значение 4.\r",
									"pm.test(\"age = 4\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/object_info_3?age=32&salary=2000&name=Alex",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "age",
									"value": "32"
								},
								{
									"key": "salary",
									"value": "2000"
								},
								{
									"key": "name",
									"value": "Alex"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"let resp = JSON.parse(responseBody);  //3. Спарсить response body в json.\r",
									"\r",
									"let req = pm.request.url.query.toObject()// 4. Спарсить request.\r",
									"\r",
									"let resp_name = resp.name\r",
									"let req_name = req.name\r",
									"let resp_age = resp.age\r",
									"let req_age = req.age\r",
									"let resp_salary = resp.salary\r",
									"let req_salary = req.salary\r",
									"\r",
									"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"name в ответе равно name s request \", function () {   //\r",
									"    pm.expect(resp_name).to.eql(req_name);\r",
									"});\r",
									"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
									"pm.test(\"age в ответе равно age s request \", function () {   \r",
									"    pm.expect(resp_age) === (req_age);\r",
									"});\r",
									"\r",
									"// 7. Вывести в консоль параметр salary из request.\r",
									"console.log(req.salary)\r",
									"\r",
									"// 8. Вывести в консоль параметр salary из response.\r",
									"console.log(jsonData.salary)\r",
									"\r",
									"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
									"console.log(jsonData.salary[0])\r",
									"\r",
									"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
									"console.log(jsonData.salary[1])\r",
									"\r",
									"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
									"console.log(jsonData.salary[2])\r",
									"\r",
									"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
									"\r",
									"pm.test(\"0-й элемент параметра salary равен salary из request \", function () {   //\r",
									"    pm.expect(jsonData.salary[0]).to.eql (Number(req_salary));\r",
									"});\r",
									"\r",
									"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
									"\r",
									"let req_two = req_salary * 2\r",
									"pm.test(\"1-й элемент параметра salary равен salary*2 \", function () {   //\r",
									"    pm.expect(Number(jsonData.salary[1])).to.eql (req_two);\r",
									"});\r",
									"\r",
									"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
									"\r",
									"let req_three = req_salary * 3\r",
									"pm.test(\" 2-й элемент параметра salary равен salary*3 из request \", function () {   //\r",
									"    pm.expect(Number(jsonData.salary[2])).to.eql (req_three);\r",
									"});\r",
									"\r",
									"let user_name = jsonData.name //15. Создать в окружении переменную name\r",
									"let user_age = jsonData.age //16. Создать в окружении переменную age\r",
									"let user_sallary = jsonData.salary  //17. Создать в окружении переменную salary\r",
									"\r",
									"pm.environment.set(\"name\", user_name); //18. Передать в окружение переменную name\r",
									"pm.environment.set(\"age\", user_age); //19. Передать в окружение переменную age\r",
									"pm.environment.set(\"salary\", user_sallary); //20. Передать в окружение переменную salary\r",
									"\r",
									"\r",
									"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
									"\r",
									"\r",
									"// for (let resp_salary = req.salary; resp_salary < req_three;  resp_salary + resp_salary){\r",
									"\r",
									"//     if (resp_salary < req_three){\r",
									"//         console.log(resp_salary)\r",
									"//     }else if (req_two = req_three){\r",
									"//     console.log(req_two)\r",
									"//     }else {\r",
									"//     console.log(req_three) \r",
									"    \r",
									"//    // console.log(temperature, \"= FOR\")\r",
									"// }\r",
									"// }"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/object_info_4?age=32&salary=2000&name=Alex",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "age",
									"value": "32"
								},
								{
									"key": "salary",
									"value": "2000"
								},
								{
									"key": "name",
									"value": "Alex"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"let resp = JSON.parse(responseBody);  //6. Спарсить response body в json.\r",
									"\r",
									"let req = request.data;// 7. Спарсить request.\r",
									"\r",
									"let req_age = req.age\r",
									"let req_salary = req.salary\r",
									"\r",
									"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
									"pm.test(\"response have start_qa_salary\", function () {\r",
									"    pm.expect(jsonData).to.have.property('start_qa_salary');\r",
									"});\r",
									"\r",
									"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
									"pm.test(\"response have qa_salary_after_6_months\", function () {\r",
									"    pm.expect(jsonData).to.have.property('qa_salary_after_6_months');\r",
									"});\r",
									"\r",
									"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
									"pm.test(\"response have qa_salary_after_12_months\", function () {\r",
									"    pm.expect(jsonData).to.have.property('qa_salary_after_12_months');\r",
									"});\r",
									"\r",
									"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
									"pm.test(\"response have qa_salary_after_1.5_year\", function () {\r",
									"    pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year');\r",
									"});\r",
									"\r",
									"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
									"pm.test(\"response have qa_salary_after_3.5_years\", function () {\r",
									"    pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years');\r",
									"});\r",
									"\r",
									"// 13. Проверить, что json response имеет параметр person\r",
									"pm.test(\"response have person\", function () {\r",
									"    pm.expect(jsonData).to.have.property('person');\r",
									"});\r",
									"\r",
									"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"start_qa_salary = salary из request\", function () {\r",
									"    pm.expect(jsonData.start_qa_salary)===(req_salary);\r",
									"});\r",
									"\r",
									"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"qa_salary_after_6_months = salary*2\", function () {\r",
									"    pm.expect(jsonData.qa_salary_after_6_months).to.eql (Number(req.salary*2))\r",
									"});\r",
									"\r",
									"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
									"pm.test(\"qa_salary_after_12_months = salary*2.7\", function () {\r",
									"    pm.expect(jsonData.qa_salary_after_12_months).to.eql (Number(req.salary*2.7))\r",
									"});\r",
									"\r",
									"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
									"pm.test(\"qa_salary_after_1.5_year = salary*3.3\", function () {\r",
									"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql (Number(req.salary*3.3))\r",
									"});\r",
									"\r",
									"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
									"pm.test(\"qa_salary_after_3.5_years = salary*3.8\", function () {\r",
									"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql (Number(req.salary*3.8))\r",
									"});\r",
									"\r",
									"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
									"pm.test(\"u_name = salary из request\", function () {\r",
									"    pm.expect(jsonData.person.u_name[1]).to.eql (Number(req.salary))\r",
									"});\r",
									"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
									"pm.test(\" u_age = age из request\", function () {\r",
									"    pm.expect(jsonData.person.u_age).to.eql (Number(req_age))\r",
									"});\r",
									"\r",
									"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
									"pm.test(\"u_salary_5_years = salary*4.2\", function () {\r",
									"    pm.expect(jsonData.person.u_salary_5_years).to.eql (Number(req.salary*4.2))\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{name}}",
									"description": "{{salary}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_2",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}